<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Cloud Native Life]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsby-starter-blog-demo.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 16 Nov 2020 05:01:58 GMT</lastBuildDate><item><title><![CDATA[Gatsby와 Github로 정적 블로그 운영하기]]></title><description><![CDATA[…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/building-new-blog/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/building-new-blog/</guid><pubDate>Wed, 11 Nov 2020 11:40:32 GMT</pubDate><content:encoded>&lt;p&gt;프로그래머라면 누구든 자신만의 개발 블로그를 운영하고 싶어지는 때가 온다고 하죠. 그중에서도 정적 블로그를
운영하고 싶어지는 때가 한 번 씩은 찾아온다고 합니다. 네, 저도 결국 정적 블로그 뽕을 맞고 말았습니다!
사실 정적 블로그를 세팅, 호스팅하는 것은 관리형 블로그 서비스나 워드프레스 등을 사용하는 것에 비해 편의성
면에서 많이 뒤쳐질 수밖에 없습니다. 당연한 이치죠. 그럼에도 불구하고 정적 블로그라는 옵션을 선택하게 되는
것은, 블로그의 모든 요소를 쉽고 완전하게 설정할 수 있다는 점에서 오는 것 같습니다. 프로그래머 입장에서
정말 지적인 즐거움이 자극되거든요.&lt;/p&gt;
&lt;p&gt;제가 처음 개발 블로그를 만들 때는 워드프레스를 사용했었는데요, &lt;b&gt;Kubernetes 클러스터 위에서 돌아가고
있었습니다.&lt;/b&gt; 그러니까 블로그 도메인이 로드 밸런서를 가리키면, 로드 밸런서가 nginx ingress 서비스로
트래픽을 보내고, nginx는 포워딩 룰에 따라 워드프레스가 떠있는 서비스를 가리키고… Kubernetes에서 서비스는
Pod로 보내는 일종의 로드 밸런서 역할도 하게 되죠? 그리하여 끝내 블로그 컨텐츠가 들어있는 워드프레스 컨테이너에
닿게 되는 거였습니다. 비효율의 극치라서 부끄럽네요.&lt;/p&gt;
&lt;p&gt;그래서 결국 심플한 옵션을 찾게 되었고, 정적 블로그를 다시 마주했습니다. 써보니까 기대하던 심플함에 부합하는 것
같아 좋고, 앞으로 커스터마이징할 여지도 남아있는 것 같아요!&lt;/p&gt;
&lt;h2&gt;정적 사이트 생성기, Gatsby&lt;/h2&gt;
&lt;p&gt;그런데 그 정적 블로그, &lt;b&gt;정적 사이트&lt;/b&gt;라고 부르는 게 대체 뭘까요. 정적 사이트란, 제공하는 컨텐츠,
즉 HTML 파일이 배포 이후 변하지 않는 웹사이트를 말합니다. 일반적인 웹사이트는 사용자가 특정 요청을 취하면
Apache, Nginx 등의 웹서버에 전달되고, 이를 건네받은 PHP, Rails, Next.js 등의 어플리케이션 엔진에서
DB 등을 참조하여 사용자에게 전달할 컨텐츠를 렌더링하여 보냅니다. 이를 &lt;b&gt;Server-side Rendering&lt;/b&gt;이라고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dhc1es6e9/image/upload/v1605058783/blog-img/201111-server-side-rendering-vs-static-site_gqolgk.png&quot; alt=&quot;Server-side Rendering&quot;&gt;&lt;/p&gt;
&lt;p&gt;SSR을 하려면 웹서버와 어플리케이션이 돌아갈 서버가 필요하네요. 이러면 서비스를 배포하고 운영하기 점점
골치가 아파옵니다. 그런데 정적 사이트 생성기로 제공할 컨텐츠를 미리 빌드해 놓았다면, 그냥 요청에 맞는 파일을
꺼내 오기만 하면 됩니다! 사용자는 브라우저에서 HTML, CSS, JS를 돌리기만 하면 상호작용 가능한 페이지가
나오구요. 이러한 간단함 덕분에 무료로 정적 사이트를 호스팅해주는 서비스도 많습니다. Github가 대표적이죠.&lt;/p&gt;
&lt;p&gt;정적 사이트 생성기는 좋은 게 많이 있는데, 저는 JavaScript/TypeScript가 익숙해서 이를 기반으로 한 기술을
사용하고 싶어요. 이쪽 진영에 &lt;a href=&quot;https://www.gatsbyjs.com&quot;&gt;Gatsby&lt;/a&gt;라는 유명한 기술이 있습니다. React와 GraphQL을 기반으로 작동해서,
현대적인 웹사이트를 구축하는 데 최적입니다.&lt;/p&gt;
&lt;p&gt;Gatsby를 사용해서 블로그를 빠르게 구축할 수 있는, 프로토타입을 제공하는 라이브러리가 있습니다. React를 공부해
본 분이라면 create-react-app을 알고 계실 거에요. Gatsby에도 &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;gatsby-starter-blog&lt;/a&gt;라는 비슷한 놈이 있죠.
설치와 세팅을 마치고 나면, 소스 코드에 들어가서 파일을 직접 수정하고, localhost에서 개발 빌드를 확인해
가면서 개발하는 거에요. React 개발이랑 똑같네요.&lt;/p&gt;
&lt;h2&gt;Cloudinary에 이미지 호스팅하기&lt;/h2&gt;
&lt;p&gt;이제 이미지를 서빙할 방법을 생각해 보아야 합니다. 가장 간단한 선택지로는 물론, 리포 안에 이미지 파일을 저장해
놓고 빌드 단계에서 HTML 파일에서 이미지 파일을 담는 방식이 있겠죠. 문제점은, 그 이미지 파일을 포함해서 트래픽이
증가한다는 점이 우선 떠오르네요. 그리고, 우리가 사용할 Github 리포의 용량 한계가 1GB이기 때문에 언젠가는
용량을 초과할 거란 거에요. 물론 용량 한계가 없더라도 매번 빌드 시간이 증가할 것이기에 이미지 컨텐츠를 정적으로
서빙하는 것은 좋은 생각이 아닙니다.&lt;/p&gt;
&lt;p&gt;그래서 우리는 이미지 파일을 외부에 호스팅해 놓고 참조해 올 거에요. 다양한 옵션이 있지만, 편의성 측면에서 &lt;a href=&quot;https://cloudinary.com&quot;&gt;Cloudinary&lt;/a&gt;라는
좋은 무료 서비스가 있습니다. 이미지 변환을 자동으로 해주고 월 최대 25GB의 트래픽을 지원해요. 개인 개발 블로그
운영하기에 충분한 트래픽이죠. 가입해서 이미지를 등록하고, 링크를 복사해 와서 마크다운에 추가하면 됩니다.&lt;/p&gt;
&lt;h2&gt;gh-pages를 이용해 Github에 호스팅하기&lt;/h2&gt;
&lt;p&gt;이제 우리 블로그를 인터넷에서 접속할 수 있게 호스팅을 붙여야겠죠. 우리는 &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;를 이용할 거에요.
월 100GB의 트래픽을 제공하고, github.io라는 도메인을 기본으로 제공하죠. 물론 갖고 있는 개인 도메인을
포워딩시킬 수도 있어요! 그러기 위해 우선 Gatsby 리포를 Github에 올려놓겠습니다. 또, 기본적으로 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;user&amp;gt;.github.io&lt;/code&gt;
형태의 리포를 등록하고 나서 Github Pages를 이용할 수 있어요. 자세한 과정은 &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site&quot;&gt;이 링크&lt;/a&gt;를 참조해 주세요!&lt;/p&gt;
&lt;p&gt;이제 gh-pages를 이용해서 Github Pages에 퍼블리시할 브랜치를 생성할 거에요. 우선 gh-pages를 받아 주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install gh-pages --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 Gatsby에 gh-pages 세팅을 할 차례입니다. gastby-config.js에 다음 코드 블럭을 추가해 주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module.exports = {
  pathPrefix: &amp;quot;/reponame&amp;quot;,
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고, npm의 deploy 스크립트를 추가할 차례입니다. package.json으로 가서 수정해 주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Option: 개인 도메인 등록하기&lt;/h3&gt;
&lt;p&gt;개인 도메인을 블로그로 포워딩시키고 싶으시다구요? 아시겠지만 도메인 관리 페이지에서 설정한 CNAME 레코드를
등록하고, Github 리포 설정에 반영하여야 합니다. 우선 도메인을 Github Pages 설정에 추가해 주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dhc1es6e9/image/upload/v1605167751/blog-img/save-custom-domain_n92w5k.png&quot; alt=&quot;Saving custom domain&quot;&gt;&lt;/p&gt;
&lt;p&gt;이제 도메인의 DNS 설정에서 CNAME 레코드를 등록해 주세요. A 레코드는 서브도메인이 없는 최상위 도메인을 뜻하는데,
혹시 이것도 추가하고 싶으시다면 A 레코드에 Github Pages의 IP 주소를 등록해 주세요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 HTTPS를 지원해야겠죠. 이대로 처음 도메인을 등록하면 인증서가 없어서 도메인 주소로 접속이 안 됩니다. 브라우저 레벨에서 HSTS를 준수하지 않는 사이트를 차단해 버리니까요. 옵션에서 Enforce HTTPS를 선택해 주시면 방금 생성되었던 인증서가 무조건 적용됩니다.
그러면 http 접속에 대해 강제로 https로 리디렉트가 되죠.
만약 www 연결이 적절한 인증서가 없다고 하면 CNAME 레코드에 원래 도메인을 입력해 주시는 걸로 일단 해결할 수 있어요.
이때 www 주소에 대한 HTTP 코드는 301 Moved가 나오게 됩니다.&lt;/p&gt;
&lt;h2&gt;반응형 웹페이지 구현하기&lt;/h2&gt;
&lt;p&gt;지금까지 우리가 만든 페이지는 PC에만 대응합니다. 다시 말해 모바일로 들어가면, 규격이 맞지 않아 뒤죽박죽
깨지게 될 거란 말이죠.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[1부. Docker 네트워킹]]></title><description><![CDATA[Docker는 사용 사례에 따라 다섯 가지 네트워킹 방법을 제공합니다. eth0-container Host Networking을 하는 컨테이너는 Host와 IP 주소, 네트워크 네임스페이스를 공유합니다. 이 컨테이너에서 돌아가는 서비스는 Host…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/docker-networking/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/docker-networking/</guid><pubDate>Wed, 11 Nov 2020 11:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Docker는 사용 사례에 따라 다섯 가지 네트워킹 방법을 제공합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dhc1es6e9/image/upload/v1605069685/blog-img/201111-eth0-container_nv8918.png&quot; alt=&quot;eth0-container&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Host Networking을 하는 컨테이너는 Host와 IP 주소, 네트워크 네임스페이스를 공유합니다. 이 컨테이너에서 돌아가는 서비스는 Host에서의 서비스와 같은 능력을 갖습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dhc1es6e9/image/upload/v1605069685/blog-img/201111-communication-between-containers_ltxucu.png&quot; alt=&quot;communication-between-containers&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Bridge Networking은 Host 내의 Private Network 내의 컨테이너들끼리 이루어집니다. Host 바깥에 있는 서비스와 통신할 때에는 &lt;strong&gt;NAT&lt;/strong&gt;(Network Address Translation)를 거칩니다. Bridge Networking은 따로 설정을 하지 않았을 때의 default 옵션이고요, docker0 bridge를 Docker 데몬이 생성하죠.
Docker 컨테이너가 생성될 때는 가상 이더넷 장치인 eth0가 생성되고, Host(Bridge) 내에서는 vethxxx라는 식별자를 갖습니다. 여기서도 Host 안에 있는 컨테이너들과 통신 가능하게 되고요.
밖에서는 컨테이너가 노출되지 않기 때문에, &lt;strong&gt;포트를 노출&lt;/strong&gt;해 주어야 합니다. 만약 해당 컨테이너의 80번 포트를 Host의 8080번에 publish하고 싶다면, 다음과 같이 설정하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --name nginx -p &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;:80 nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker 데몬은 Netfilter에 인바운드/아웃바운드 트래픽 규칙을 설정해서 NAT 등을 자동적으로 수행해 줍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom Bridge Network는 Bridge와 비슷하게 동작하지만, 다른 컨테이너와 명시적으로 연결된 네트워크 상에서 통신합니다. DB 등에 Bridge를 설정하여 보안 등의 이점을 취할 수 있습니다. 예를 들면 Bridge 안에서는 포트를 노출하지 않아도 됩니다. 환경 변수도 공유되고요.&lt;/li&gt;
&lt;li&gt;Container-defined Network는 K8s의 Multi-container Pod와 비슷하게 동작합니다. 즉, 컨테이너끼리 네트워크를 공유하죠.&lt;/li&gt;
&lt;li&gt;아니면 네트워크를 사용하지 않도록 설정합니다. 이러면 포트를 노출할 수 없어요.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;컨테이너 간 통신&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dhc1es6e9/image/upload/v1605069685/blog-img/201111-docker-bridge_ypzrnq.png&quot; alt=&quot;docker-bridge&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;먼저 왼쪽 컨테이너에서의 패킷은 eth0를 통과하여 vethxxx로 유입됩니다.&lt;/li&gt;
&lt;li&gt;docker0 내에서 vethxxx와 vethyyy가 연결됩니다.&lt;/li&gt;
&lt;li&gt;vethyyy로 패킷이 이동합니다.&lt;/li&gt;
&lt;li&gt;그리고 오른쪽 컨테이너의 eth0로 패킷이 도착합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이는 같은 Host(Bridge)를 공유할 때의 경우입니다. Docker에서는 모든 노드가 동일한 컨테이너 서브넷을 구성하므로, 노드 간 통신(다른 Host 간 통신)을 할 때에는 NAT 과정이 반드시 필요합니다.&lt;/p&gt;
&lt;h2&gt;다른 Host 간의 통신&lt;/h2&gt;
&lt;p&gt;실제 프로덕션 환경은 분산 컴퓨팅 환경에서 이루어지므로, 다른 Host 간의 통신이 대부분입니다. 이때는 보통 overlay 네트워크를 사용합니다. overlay 네트워크는 L3 네트워크 위에 가상의 L2 네트워크를 올리는 방식으로 구현되는데, 이를 잠깐 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dhc1es6e9/image/upload/v1605069685/blog-img/201111-communication-between-networks_trdsqg.jpg&quot; alt=&quot;communication-between-networks&quot;&gt;&lt;/p&gt;
&lt;p&gt;L2 통신은 동일한 서브넷 Host를 가질 때 이루어집니다. 이를 &lt;strong&gt;LAN&lt;/strong&gt;(Local Area Network)이라고 합니다. LAN 내부에 있는 장치들끼리 연결하기 위해서는 이들의 MAC Address를 저장하고 있는 MAC Table이 필요합니다. Docker 컨테이너들은 각각 가상의 이더넷 장치인 eth0를 갖고 있고 이들의 MAC Address가 Host의 테이블에 저장되죠. 또한 서브넷 내에서 각 장치들이 갖는 IP 주소 또한 resolve되어야 하므로 다음의 3가지 테이블이 필요합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Routing Table&lt;/li&gt;
&lt;li&gt;ARP Table&lt;/li&gt;
&lt;li&gt;MAC Table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L3 통신은 LAN 바깥, 다른 서브넷을 가지는 장치 사이에서 이루어집니다. 근거리 내에 있는 VLAN들이나, 클라우드 Private Network 내에 있는 서브넷끼리 연결하죠. 따라서 서로 다른 서브넷에 속해 있는 컨테이너끼리 통신하려면, L3에서 라우터를 반드시 거쳐야 합니다. 한편 &lt;strong&gt;overlay 네트워크&lt;/strong&gt;에서는 L2 네트워크끼리 라우팅을 거치지 않고 통신이 이루어집니다. Calico, Flannel, Weavenet 등이 주로 사용되는데, 이는 추후에 알아보겠습니다.&lt;/p&gt;</content:encoded></item></channel></rss>