{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","styles","tags","frontmatter","map","tag","className","activeClassName","to","toLowerCase","name","toString","links","link","description","excerpt","itemScope","itemType","itemProp","date","index","length","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","pageQuery"],"mappings":"2FAAA,0HA4FeA,UArFU,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAEZC,EACM,oEADNA,EAEa,0BAEbC,EAAOT,EAAKU,YAAYD,KAAKE,KAAI,SAAAC,GACrC,MAAO,CACLC,UAAWL,EACXM,gBAAiBN,EACjBO,GAAI,SAASH,EAAII,cACjBC,KAAML,EAAIM,eAIRC,EAAQV,EAAKE,KAAI,SAAAS,GACrB,OAAQ,kBAAC,OAAD,CAAMP,UAAWO,EAAKP,UAAWC,gBAAiBM,EAAKN,gBAAiBC,GAAIK,EAAKL,IAAKK,EAAKH,SAGrG,OACE,kBAAC,IAAD,CAAQlB,SAAUA,EAAUM,MAAOH,GACjC,kBAAC,IAAD,CACEG,MAAOL,EAAKU,YAAYL,MACxBgB,YAAarB,EAAKU,YAAYW,aAAerB,EAAKsB,UAEpD,6BACET,UAAU,YACVU,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YAAYzB,EAAKU,YAAYL,OAC1C,2BAAIL,EAAKU,YAAYgB,MACrB,6BACGP,EAAMR,KAAI,SAACS,EAAMO,GAChB,OAAIA,GAASlB,EAAKmB,OAAO,EAChBR,EAEF,4BAAKA,EAAK,4BAAK,WAG1B,8BAEF,6BACES,wBAAyB,CAAEC,OAAQ9B,EAAK+B,MACxCN,SAAS,gBAEX,6BACA,gCACE,kBAAC,IAAD,QAGJ,yBAAKZ,UAAU,iBACb,wBACEmB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACG/B,GACC,kBAAC,OAAD,CAAMS,GAAIT,EAASgC,OAAOC,KAAMC,IAAI,QAApC,KACKlC,EAASI,YAAYL,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMQ,GAAIR,EAAK+B,OAAOC,KAAMC,IAAI,QAC7BjC,EAAKG,YAAYL,MADpB,WAaP,IAAMoC,EAAS","file":"component---src-templates-blog-post-js-c6ed3956ff98fd600786.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  const styles = {\n    className:'text-gray-600 block px-2 py-1 hover:underline hover:text-gray-900',\n    activeClassName: 'underline text-gray-900'\n  }\n  const tags = post.frontmatter.tags.map(tag => {\n    return {\n      className: styles.className,\n      activeClassName: styles.activeClassName,\n      to: '/tags/'+tag.toLowerCase(),\n      name: tag.toString()\n    }\n  })\n\n  const links = tags.map(link => {\n    return (<Link className={link.className} activeClassName={link.activeClassName} to={link.to}>{link.name}</Link> )\n  })\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n          <div>\n            {links.map((link, index) => {\n              if (index == tags.length-1) {\n                return link\n              }\n              return <p1>{link}<p2>{', '}</p2></p1>\n            })}\n          </div>\n          <br></br>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}